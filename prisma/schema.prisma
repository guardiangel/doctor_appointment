// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  category  String
  content   String   @db.Text
  author    String
  image     String
  snippet   String   @db.Text
}

model User {
  id                  String        @id @default(uuid())
  userId              String        @unique
  password            String
  userName            String
  address             String
  phone               String
  email               String
  type                String
  gender              String
  age                 Int
  categoryId          String
  category            Category      @relation(fields: [categoryId], references: [categoryValue])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  patientAppointments Appointment[] @relation("patientAppointments")
  doctorAppointments  Appointment[] @relation("doctorAppointments")
  treatments          Treatment[]

  @@index([categoryId])
}

model Treatment {
  id            String       @id @default(uuid())
  patientId     String
  patient       User         @relation(fields: [patientId], references: [userId])
  appointmentId Int          @unique
  appoinment    Appointment? @relation(fields: [appointmentId], references: [appointmentId])
  dise          String
  treatment     String
  note          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([patientId])
}

model Category {
  id            String        @id @default(uuid())
  categoryValue String        @unique
  categoryName  String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Appointment   Appointment[]
  User          User[]
}

model Appointment {
  id              String     @id @default(uuid())
  appointmentId   Int        @unique
  doctorId        String
  doctor          User       @relation("doctorAppointments", fields: [doctorId], references: [userId])
  patientId       String
  patient         User       @relation("patientAppointments", fields: [patientId], references: [userId])
  categoryId      String //only work with type 2, which means the doctor
  category        Category   @relation(fields: [categoryId], references: [id])
  timeSlotValue   String
  appointmentDate String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  treatment       Treatment?

  @@index([categoryId])
  @@index([doctorId])
  @@index([patientId])
}

model Timeslot {
  id            String   @id @default(uuid())
  timeSlotOrder Int      @unique
  timeSlotValue String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
